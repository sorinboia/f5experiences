<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Security on Nginx Experience</title>
    <link>/060_security/</link>
    <description>Recent content in Security on Nginx Experience</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 08 Jul 2020 14:37:59 +0300</lastBuildDate><atom:link href="/060_security/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ELK deployment</title>
      <link>/060_security/010_elk_deployment/</link>
      <pubDate>Wed, 08 Jul 2020 14:37:59 +0300</pubDate>
      
      <guid>/060_security/010_elk_deployment/</guid>
      <description>Deploy ELK in order to be able to visualize and analyze the traffic going through the Nginx App Protect web application firewall  kubectl apply -f files/6waf/elk.yamlIn order to connect to our ELK pod, we will need to find the public address of this service:  kubectl get svc elk-webOutput
NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGEelk-web LoadBalancer 172.20.179.34 a28bd2d8c94214ae0b512274daa06211-2103709514.eu-central-1.elb.amazonaws.com 5601:32471/TCP,9200:32589/TCP,5044:31876/TCP 16h 3. Verify that ELK is up and running by browsing to: http://[ELK-EXTERNAL-IP]:5601/.</description>
    </item>
    
    <item>
      <title>Nginx App Protect deployment</title>
      <link>/060_security/020_nap_deployment/</link>
      <pubDate>Wed, 08 Jul 2020 14:37:59 +0300</pubDate>
      
      <guid>/060_security/020_nap_deployment/</guid>
      <description>Prepare the Nginx App Protect config  export elk_log=$(kubectl get svc elk-log | tr -s &amp;quot; &amp;quot; | cut -d&#39; &#39; -f3 | grep -v &amp;quot;CLUSTER-IP&amp;quot;)cat &amp;lt;&amp;lt; EOF | kubectl apply -f -# APPolicy is the policy configuration. Here we are enabling signature check of known attacksapiVersion: appprotect.f5.com/v1beta1kind: APPolicymetadata: name: attacksigsspec:policy:name: attacksigstemplate:name: POLICY_TEMPLATE_NGINX_BASEapplicationLanguage: utf-8enforcementMode: blockingsignature-sets:- name: All Signaturesblock: truealarm: true---# We are going to log to ELK all requests not only the blocked onesapiVersion: appprotect.</description>
    </item>
    
    <item>
      <title>Nginx App Protect testing</title>
      <link>/060_security/030_nap_test/</link>
      <pubDate>Wed, 08 Jul 2020 14:37:59 +0300</pubDate>
      
      <guid>/060_security/030_nap_test/</guid>
      <description>Browse again to the Arcadia web app and verify that it is still working.
  Let&amp;rsquo;s simulate a Cross Site Scripting (XSS) attack, and make sure it&amp;rsquo;s blocked:
  https://&amp;lt;INGRESS-EXTERNAL-IP&amp;gt;/?a=%3Cscript%3Ealert(%27xss%27)%3C/script%3E
Each of the blocked requests will generate a support ID, save it for later.
Browse to the ELK as before and click the &amp;ldquo;Discover&amp;rdquo; button:  Here, you&amp;rsquo;ll see all the request logs, allowed and blocked, sent by the Nginx WAF to ELK.</description>
    </item>
    
    <item>
      <title>Bot Protection</title>
      <link>/060_security/040_bot_protection/</link>
      <pubDate>Wed, 08 Jul 2020 14:37:59 +0300</pubDate>
      
      <guid>/060_security/040_bot_protection/</guid>
      <description>Our application APIs at the moment are published only for consumption by browsers.
Therefor we don&amp;rsquo;t want to allow any kind of automated tool to access these endpoints.
We are going to block not only malicious bots but also tools like curl.
 Try and access the stock microservice and get data with curl.  curl -k https://$nginx_ingress/v1/stock/ticker/allThe request will succeed.
Apply the bot config  cat &amp;lt;&amp;lt; EOF | kubectl apply -f -apiVersion: appprotect.</description>
    </item>
    
  </channel>
</rss>
