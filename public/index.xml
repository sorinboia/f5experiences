<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nginx Experience</title>
    <link>/</link>
    <description>Recent content on Nginx Experience</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 08 Jul 2020 14:37:59 +0300</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Accessing the Nginx Controller</title>
      <link>/070_controller/010_accessing_controller/</link>
      <pubDate>Wed, 08 Jul 2020 14:37:59 +0300</pubDate>
      
      <guid>/070_controller/010_accessing_controller/</guid>
      <description>The Nginx Controller has already been deployed with the terraform declaration, we need to find the public IP address.  cd terraformexport controller_ip=$(terraform state show &amp;quot;aws_instance.controller&amp;quot; | grep &amp;quot;public_ip&amp;quot; | grep -v &amp;quot;associate_public_ip_address&amp;quot; | cut -d&#39;&amp;quot;&#39; -f2)curl -k -c cookie.txt -X POST --url &amp;quot;https://$controller_ip/api/v1/platform/login&amp;quot; --header &#39;Content-Type: application/json&#39; --data &#39;{&amp;quot;credentials&amp;quot;: {&amp;quot;type&amp;quot;: &amp;quot;BASIC&amp;quot;,&amp;quot;username&amp;quot;: &amp;quot;admin@nginx.com&amp;quot;,&amp;quot;password&amp;quot;: &amp;quot;Admin2021&amp;quot;}}&#39;export controller_apikey=$(curl -k -sb cookie.txt -c cookie.txt https://$controller_ip/api/v1/platform/global | jq .currentStatus.agentSettings.apiKey | tr -d &#39;&amp;quot;&#39;)terraform state show &amp;quot;aws_instance.</description>
    </item>
    
    <item>
      <title>App deployment</title>
      <link>/030_application/010_app_deployment_1/</link>
      <pubDate>Wed, 08 Jul 2020 14:37:59 +0300</pubDate>
      
      <guid>/030_application/010_app_deployment_1/</guid>
      <description>Deploy the app  kubectl apply -f files/4ingress/1arcadia_delpoy.yamlOutput
deployment.apps/arcadia-db createdservice/arcadia-db createddeployment.apps/arcadia-frontend createdservice/arcadia-frontend createddeployment.apps/arcadia-login createdservice/arcadia-login createddeployment.apps/arcadia-stock-transaction createdservice/arcadia-stock-transaction createddeployment.apps/arcadia-stocks createdservice/arcadia-stocks createddeployment.apps/arcadia-users createdservice/arcadia-users created Check that all is deployed and working as expected:  kubectl get podsOutput
NAME READY STATUS RESTARTS AGEarcadia-db-696f979799-sdzb6 1/1 Running 0 36sarcadia-frontend-57ff4f888-v4ggh 1/1 Running 0 36sarcadia-login-c995f8dcc-7gvvp 1/1 Running 0 35sarcadia-stock-transaction-b996cddb9-xzckf 1/1 Running 0 34sarcadia-stocks-dd58548f7-k7tg7 1/1 Running 0 34sarcadia-users-768dddd844-8s75q 1/1 Running 0 33s kubectl get svc -owideOutput</description>
    </item>
    
    <item>
      <title>ELK deployment</title>
      <link>/060_security/010_elk_deployment/</link>
      <pubDate>Wed, 08 Jul 2020 14:37:59 +0300</pubDate>
      
      <guid>/060_security/010_elk_deployment/</guid>
      <description>Deploy ELK in order to be able to visualize and analyze the traffic going through the Nginx App Protect web application firewall  kubectl apply -f files/6waf/elk.yamlIn order to connect to our ELK pod, we will need to find the public address of this service:  kubectl get svc elk-webOutput
NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGEelk-web LoadBalancer 172.20.179.34 a28bd2d8c94214ae0b512274daa06211-2103709514.eu-central-1.elb.amazonaws.com 5601:32471/TCP,9200:32589/TCP,5044:31876/TCP 16h 3. Verify that ELK is up and running by browsing to: http://[ELK-EXTERNAL-IP]:5601/.</description>
    </item>
    
    <item>
      <title>Nginx Kubernetes Ingress Installation</title>
      <link>/040_ingress/010_ingress_install_1/</link>
      <pubDate>Wed, 08 Jul 2020 14:37:59 +0300</pubDate>
      
      <guid>/040_ingress/010_ingress_install_1/</guid>
      <description>We are going to use the Nginx installation manifests based on the Nginx Ingress Controller installation guide. For simplicity - we have already prepared an installation script.
 Run the command bellow:  ./files/4ingress/ingress_install.shOutput
Starting Nginx Ingress InstallCloning into &amp;#39;kubernetes-ingress&amp;#39;...remote: Enumerating objects: 1270, done.remote: Counting objects: 100% (1270/1270), done.remote: Compressing objects: 100% (799/799), done.remote: Total 34666 (delta 552), reused 1008 (delta 422), pack-reused 33396Receiving objects: 100% (34666/34666), 46.</description>
    </item>
    
    <item>
      <title>Remove configuration</title>
      <link>/080_cleanup/010_cleanup/</link>
      <pubDate>Wed, 08 Jul 2020 14:37:59 +0300</pubDate>
      
      <guid>/080_cleanup/010_cleanup/</guid>
      <description> In order to delete the resources created during this workshop, run the commands below:  kubectl delete --all svc --namespace=nginx-meshkubectl delete --all svc --namespace=nginx-ingresskubectl delete --all svc --namespace=defaultcd terraformterraform destroy --auto-approveÂ Finally, delete the previously created Cloud9 stack in the CloudFormation console.  Please note: This will also delete the Cloud9 IDE instance.
</description>
    </item>
    
    <item>
      <title>Terraform Apply</title>
      <link>/020_terraform/010_terraform_apply_1/</link>
      <pubDate>Wed, 08 Jul 2020 14:37:59 +0300</pubDate>
      
      <guid>/020_terraform/010_terraform_apply_1/</guid>
      <description>All configuration and management of the infrastructure will be done from the Jumphost.
SSH into the Jumphost.
  Watch the terraform deployment status.
  tail -f startup/startup.logWhen the the ALL IS DONE message will appear in the logs you can continue.</description>
    </item>
    
    <item>
      <title>AWS EKS</title>
      <link>/020_terraform/020_eks_1/</link>
      <pubDate>Wed, 08 Jul 2020 14:37:59 +0300</pubDate>
      
      <guid>/020_terraform/020_eks_1/</guid>
      <description>While you wait, you can review the Introduction section of the AWS EKS Workshop to learn about Kubernetes and Amazon EKS basics.
Managed control plane Amazon EKS provides a scalable and highly-available control plane that runs across multiple AWS availability zones. The Amazon EKS service automatically manages the availability and scalability of the Kubernetes API servers and the etcd persistence layer for each cluster. Amazon EKS runs the Kubernetes control plane across three Availability Zones in order to ensure high availability, and it automatically detects and replaces unhealthy masters.</description>
    </item>
    
    <item>
      <title>Microgateway deployment</title>
      <link>/070_controller/020_microgateway/</link>
      <pubDate>Wed, 08 Jul 2020 14:37:59 +0300</pubDate>
      
      <guid>/070_controller/020_microgateway/</guid>
      <description>Deploy the microgateway with the following configuration.  cat &amp;lt;&amp;lt; EOF | kubectl apply -f -apiVersion: apps/v1kind: Deploymentmetadata:name: microgatewayspec:replicas: 1selector:matchLabels:app: microgatewaytemplate:metadata:labels:app: microgatewayspec:containers:- name: microgatewayimage: $AWS_ACCOUNT_ID.dkr.ecr.eu-central-1.amazonaws.com/arcadia-microgateway:v1imagePullPolicy: Alwaysenv:- name: ENV_CONTROLLER_API_URLvalue: $controller_ip:443- name: ENV_CONTROLLER_API_KEYvalue: $controller_apikeyports:- containerPort: 80- containerPort: 443---apiVersion: v1kind: Servicemetadata:name: microgatewayspec:selector:app: microgatewayports:- port: 80targetPort: 80name: http- port: 443targetPort: 443name: httpsexternalTrafficPolicy: Localtype: LoadBalancerEOFFrom now on we will only use the Controller GUI do to all of our configuration.</description>
    </item>
    
    <item>
      <title>Nginx App Protect deployment</title>
      <link>/060_security/020_nap_deployment/</link>
      <pubDate>Wed, 08 Jul 2020 14:37:59 +0300</pubDate>
      
      <guid>/060_security/020_nap_deployment/</guid>
      <description>Prepare the Nginx App Protect config  export elk_log=$(kubectl get svc elk-log | tr -s &amp;quot; &amp;quot; | cut -d&#39; &#39; -f3 | grep -v &amp;quot;CLUSTER-IP&amp;quot;)cat &amp;lt;&amp;lt; EOF | kubectl apply -f -# APPolicy is the policy configuration. Here we are enabling signature check of known attacksapiVersion: appprotect.f5.com/v1beta1kind: APPolicymetadata: name: attacksigsspec:policy:name: attacksigstemplate:name: POLICY_TEMPLATE_NGINX_BASEapplicationLanguage: utf-8enforcementMode: blockingsignature-sets:- name: All Signaturesblock: truealarm: true---# We are going to log to ELK all requests not only the blocked onesapiVersion: appprotect.</description>
    </item>
    
    <item>
      <title>Nginx Service Mesh deployment</title>
      <link>/050_service_mesh/020_nsm_deploy/</link>
      <pubDate>Wed, 08 Jul 2020 14:37:59 +0300</pubDate>
      
      <guid>/050_service_mesh/020_nsm_deploy/</guid>
      <description>Deploy all Nginx components in the Kubernetes environment  nginx-meshctl deploy --registry-server &amp;quot;$AWS_ACCOUNT_ID.dkr.ecr.eu-central-1.amazonaws.com&amp;quot; --image-tag 0.9.0 --sample-rate 1 --disable-auto-injectOutput
Deploying NGINX Service Mesh Control Plane in namespace &amp;#34;nginx-mesh&amp;#34;...Created namespace &amp;#34;nginx-mesh&amp;#34;.W0502 08:20:37.942849 7607 warnings.go:70] apiextensions.k8s.io/v1beta1 CustomResourceDefinition is deprecated in v1.16&amp;#43;, unavailable in v1.22&amp;#43;; use apiextensions.k8s.io/v1 CustomResourceDefinitionCreated SpiffeID CRD.W0502 08:20:38.076108 7607 warnings.go:70] admissionregistration.k8s.io/v1beta1 ValidatingWebhookConfiguration is deprecated in v1.16&amp;#43;, unavailable in v1.22&amp;#43;; use admissionregistration.k8s.io/v1 ValidatingWebhookConfigurationWaiting for SPIRE to be running.</description>
    </item>
    
    <item>
      <title>Publish the app</title>
      <link>/040_ingress/020_ingress_01/</link>
      <pubDate>Wed, 08 Jul 2020 14:37:59 +0300</pubDate>
      
      <guid>/040_ingress/020_ingress_01/</guid>
      <description>Expose all the application services and route traffic based on the HTTP path. We will start with a basic configuration.
 Expose Arcadia to the world.  cat &amp;lt;&amp;lt; EOF | kubectl apply -f -apiVersion: k8s.nginx.org/v1kind: VirtualServermetadata:name: arcadiaspec:host: $nginx_ingress upstreams:- name: arcadia-usersservice: arcadia-usersport: 80- name: arcadia-loginservice: arcadia-loginport: 80- name: arcadia-stocksservice: arcadia-stocksport: 80- name: arcadia-stock-transactionservice: arcadia-stock-transactionport: 80- name: arcadia-frontendservice: arcadia-frontendport: 80routes:- path: /v1/user action:pass: arcadia-users- path: /v1/login action:pass: arcadia-login- path: /v1/stock action:pass: arcadia-stocks- path: /v1/stockt action:pass: arcadia-stock-transaction- path: / action:pass: arcadia-frontendEOFNote how the various HTTP paths (/v1/user, /v1/login, /v1/stockt) are routed by Ingress to the relevant K8s services.</description>
    </item>
    
    <item>
      <title>Build the configuration</title>
      <link>/070_controller/030_configuration/</link>
      <pubDate>Wed, 08 Jul 2020 14:37:59 +0300</pubDate>
      
      <guid>/070_controller/030_configuration/</guid>
      <description>Create an environment  &amp;ldquo;N&amp;rdquo; -&amp;gt; &amp;ldquo;Services&amp;rdquo; -&amp;gt; &amp;ldquo;Environments&amp;rdquo; -&amp;gt; &amp;ldquo;Create Environment&amp;rdquo; In all the fields, enter the following value: prod.
Click on &amp;ldquo;View API Request&amp;rdquo;.
All the configuration on the Nginx Controller can be easlly automated with external orchestration systems, this view can help you in understanding how to generate the configuration API calls.
The output will look like this: Output
{&amp;#34;metadata&amp;#34;: {&amp;#34;name&amp;#34;: &amp;#34;prod&amp;#34;,&amp;#34;displayName&amp;#34;: &amp;#34;prod&amp;#34;,&amp;#34;description&amp;#34;: &amp;#34;prod&amp;#34;,&amp;#34;tags&amp;#34;: [&amp;#34;prod&amp;#34;]},&amp;#34;desiredState&amp;#34;: {}}</description>
    </item>
    
    <item>
      <title>EKS Verification</title>
      <link>/020_terraform/030_eks_verification_1/</link>
      <pubDate>Wed, 08 Jul 2020 14:37:59 +0300</pubDate>
      
      <guid>/020_terraform/030_eks_verification_1/</guid>
      <description> Check and see that our cluster is up an running.
Below we should see our two K8s worker nodes:  kubectl get nodesOutput
NAME STATUS ROLES AGE VERSIONip-10-0-3-204.eu-central-1.compute.internal Ready &amp;lt;none&amp;gt; 100s v1.19.6-eks-49a6c0  Go to the lab directory  cd lab</description>
    </item>
    
    <item>
      <title>Enable https and monitoring</title>
      <link>/040_ingress/030_health_https_1/</link>
      <pubDate>Wed, 08 Jul 2020 14:37:59 +0300</pubDate>
      
      <guid>/040_ingress/030_health_https_1/</guid>
      <description>In our next step we will finish this part of the configuration, we will implement the following:
 Enable health checks Enable https for the application and redirect http requests to https   Apply the configuration.  cat &amp;lt;&amp;lt; EOF | kubectl apply -f -apiVersion: v1data:tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZMRENDQkJTZ0F3SUJBZ0lTQTUrVmpoQmN3NUJKNWk0QXU2VGl0L3h0TUEwR0NTcUdTSWIzRFFFQkN3VUEKTURJeEN6QUpCZ05WQkFZVEFsVlRNUll3RkFZRFZRUUtFdzFNWlhRbmN5QkZibU55ZVhCME1Rc3dDUVlEVlFRRApFd0pTTXpBZUZ3MHlNVEF4TVRjeE1USXpNek5hRncweU1UQTBNVGN4TVRJek16TmFNQjR4SERBYUJnTlZCQU1NCkV5b3VZWEpqWVdScFlXTnllWEIwYnk1dVpYUXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUsKQW9JQkFRRE1LQkNYWHdaL0xQbzNmM2pMR3IvamhNRXNTZmdrT3ErOGtOUEpxVzdPbGtCazRrZWtlaEtFVVVDQwowUHdUazgrbnp0Skg3bzBEOUNaaEZuVW9pSGVnZkRzTURFNWFoVXh4blQ1czlmWHZvRlJqSnlYUUR0VlhvR1VQCk1ubzJlVkdYYi81Qm1LeVNJMDVpQ3B5SCtNVC9YRHFhd3BhV2ZsTDJ5OXpZK1V2NGlkQVhsZFpDUnBVSEhOV1cKZjhPeUMvcFJiZndhYVYzRDJ6RjFaeHJ6Z2JIcWd3WXpkRHNnYXVkdk56N0pocytDaENxL1JQNWhMSGNkNzV5bQo1bmppTFZsVmcvYUZJS09IT2wyZ1RFdnQ4WWdjTXdUSWgwNjRrcWpVS3g5UDBmQkpZSzNwV0ZoelhwaENHaWd1CjdTd3EyYnpGTkZabjY1SEdtSDBJY1RLMVlNSm5BZ01CQUFHamdnSk9NSUlDU2pBT0JnTlZIUThCQWY4RUJBTUMKQmFBd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUNNQXdHQTFVZEV3RUIvd1FDTUFBdwpIUVlEVlIwT0JCWUVGSXhRMk9EMjhFWjVaVkNTRmNBTlVLbEdqcTFVTUI4R0ExVWRJd1FZTUJhQUZCUXVzeGUzCldGYkxybEFKUU9ZZnI1MkxGTUxHTUZVR0NDc0dBUVVGQndFQkJFa3dSekFoQmdnckJnRUZCUWN3QVlZVmFIUjAKY0RvdkwzSXpMbTh1YkdWdVkzSXViM0puTUNJR0NDc0dBUVVGQnpBQ2hoWm9kSFJ3T2k4dmNqTXVhUzVzWlc1agpjaTV2Y21jdk1CNEdBMVVkRVFRWE1CV0NFeW91WVhKallXUnBZV055ZVhCMGJ5NXVaWFF3VEFZRFZSMGdCRVV3ClF6QUlCZ1puZ1F3QkFnRXdOd1lMS3dZQkJBR0MzeE1CQVFFd0tEQW1CZ2dyQmdFRkJRY0NBUllhYUhSMGNEb3YKTDJOd2N5NXNaWFJ6Wlc1amNubHdkQzV2Y21jd2dnRUVCZ29yQmdFRUFkWjVBZ1FDQklIMUJJSHlBUEFBZHdCRQpsR1V1c083T3I4UkFCOWlvL2lqQTJ1YUN2dGpMTWJVLzB6T1d0YmFCcUFBQUFYY1FUTzdSQUFBRUF3QklNRVlDCklRQ3hMK0hhdnVOY1kzRU0yNllwN0JEeTA1TW8yTUxreHYrdE5nMHA0QmRVQlFJaEFOT1dIWmR1Z056UHl4MEkKOU5VWHVOL09JaGlnS2RGMjhlMmM0TWV3dVRmVEFIVUE5bHlVTDlGM01DSVVWQmdJTUpSV2p1Tk5FeGt6djk4TQpMeUFMekU3eFpPTUFBQUYzRUV6d3V3QUFCQU1BUmpCRUFpQWwvNEZaL1ZwR1NRV3pwdUc2Q0ljWUdHOG4wM1ZZCmRTQnFxUlFHbWUxdnVnSWdRMXg3cnRqYXhrcDNRd3FweWhYRXJyWjhPN3lIdTF2di9pdFhWR1haZzBjd0RRWUoKS29aSWh2Y05BUUVMQlFBRGdnRUJBSnh0Zmk1NmxxZ1RFUEJ6NE82R2xZclJYOVlnL3Y5cUMwWE1DazFSWlJWRApuRldQcTBQUFRWeWR3UTRsOVZQMWhlaTZhNUY0R2xQOVFzaFk3TS9CRFA0SmgwR3pOYnBCY2h4Slc2MHBuUXEzCjI4WmovNzVhamVycTFxYnEvbXpIZHhGcGVzTkVON3NYbUpzNGsrM1pOeWs3N1lXRVhsb1BDMk9STGM2MmhWWlAKdk1sYXZycmNmYWFGNTYvZkR3QzdRd2JZa3JHQzEycFZ4STMzNlFQSGJrRVE2SDNhWGUweE9Dem4rUnZxdXRMTwpqNjh2UVExWG5LdktLc0dCTVNGM29QaGYxZHZtbi9pZHBtK1RjdFJ3ZmUzTGtrL2JpZEJ2a2pJam5jb05HR1pTCllLSFVybmRzMWpDclRVTnI0RFgwTlY5bFNVOG5jUzdMMFBFOGxuUXYrWjg9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVaVENDQTAyZ0F3SUJBZ0lRUUFGMUJJTVVwTWdoaklTcERCYk4zekFOQmdrcWhraUc5dzBCQVFzRkFEQS8KTVNRd0lnWURWUVFLRXh0RWFXZHBkR0ZzSUZOcFoyNWhkSFZ5WlNCVWNuVnpkQ0JEYnk0eEZ6QVZCZ05WQkFNVApEa1JUVkNCU2IyOTBJRU5CSUZnek1CNFhEVEl3TVRBd056RTVNakUwTUZvWERUSXhNRGt5T1RFNU1qRTBNRm93Ck1qRUxNQWtHQTFVRUJoTUNWVk14RmpBVUJnTlZCQW9URFV4bGRDZHpJRVZ1WTNKNWNIUXhDekFKQmdOVkJBTVQKQWxJek1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBdXdJVktNejJvSlRURHhMcwpqVldTdy9pQzhabW1la0tJcDEwbXFyVXJ1Y1ZNc2ErT2EvbDF5S1BYRDBlVUZGVTFWNHllcUtJNUdmV0NQRUtwClRtNzFPOE11MjQzQXNGenpXVGpuN2M5cDhGb0xHNzdBbENRbGgvbzNjYk1UNXh5czRadnYyK1E3UlZKRmxxbkIKVTg0MHlGTHV0YTd0ajk1Z2NPS2xWS3UyYlE2WHBVQTBheXZUdkdiclpqUjgrbXVMajFjcG1mZ3dGMTI2Y20vNwpnY1d0MG9aWVBSZkg1d203OFN2M2h0ekIybkZkMUVianpLMGx3WWk4WUdkMVpyUHhHUGVpWE9aVC96cUl0a2VsCi94TVk2cGdKZHorZFUvblBBZVgxcG5BWEZLOWpwUCtaczVPZDNGT25CdjVJaFIyaGFhNGxkYnNUekZJRDllMVIKb1l2YkZRSURBUUFCbzRJQmFEQ0NBV1F3RWdZRFZSMFRBUUgvQkFnd0JnRUIvd0lCQURBT0JnTlZIUThCQWY4RQpCQU1DQVlZd1N3WUlLd1lCQlFVSEFRRUVQekE5TURzR0NDc0dBUVVGQnpBQ2hpOW9kSFJ3T2k4dllYQndjeTVwClpHVnVkSEoxYzNRdVkyOXRMM0p2YjNSekwyUnpkSEp2YjNSallYZ3pMbkEzWXpBZkJnTlZIU01FR0RBV2dCVEUKcDdHa2V5eHgrdHZoUzVCMS84UVZZSVdKRURCVUJnTlZIU0FFVFRCTE1BZ0dCbWVCREFFQ0FUQS9CZ3NyQmdFRQpBWUxmRXdFQkFUQXdNQzRHQ0NzR0FRVUZCd0lCRmlKb2RIUndPaTh2WTNCekxuSnZiM1F0ZURFdWJHVjBjMlZ1ClkzSjVjSFF1YjNKbk1Ed0dBMVVkSHdRMU1ETXdNYUF2b0MyR0syaDBkSEE2THk5amNtd3VhV1JsYm5SeWRYTjAKTG1OdmJTOUVVMVJTVDA5VVEwRllNME5TVEM1amNtd3dIUVlEVlIwT0JCWUVGQlF1c3hlM1dGYkxybEFKUU9ZZgpyNTJMRk1MR01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFOQmdrcWhraUc5dzBCCkFRc0ZBQU9DQVFFQTJVemd5ZldFaURjeDI3c1Q0clA4aTJ0aUVteFl0MGwrUEFLM3FCOG9ZZXZPNEM1ejcwa0gKZWpXRUh4MnRhUERZL2xhQkwyMS9XS1p1TlRZUUhIUEQ1YjF0WGdIWGJuTDdLcUM0MDFkazVWdkNhZFRRc3ZkOApTOE1Yam9oeWM5ejkvRzI5NDhrTGptRTZGbGg5ZERZclZZQTl4Mk8raEVQR09hRU9hMWVlUHluQmdQYXl2VWZMCnFqQnN0ekxoV1ZRTEdBa1hYbU5zKzVablBCeHpESk9MeGhGMkpJYmVRQWNINUgwdFpyVWxvNVpZeU9xQTdzOXAKTzViODVvM0FNL09KK0NrdEZCUXRmdkJoY0pWZDl3dmx3UHNrK3V5T3kySEk3bU54S0tnc0JUdDM3NXRlQTJUdwpVZEhraFZOY3NBS1gxSDdHTk5MT0VBRGtzZDg2d3VvWHZnPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2UUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktjd2dnU2pBZ0VBQW9JQkFRRE1LQkNYWHdaL0xQbzMKZjNqTEdyL2poTUVzU2Zna09xKzhrTlBKcVc3T2xrQms0a2VrZWhLRVVVQ0MwUHdUazgrbnp0Skg3bzBEOUNaaApGblVvaUhlZ2ZEc01ERTVhaFV4eG5UNXM5Zlh2b0ZSakp5WFFEdFZYb0dVUE1ubzJlVkdYYi81Qm1LeVNJMDVpCkNweUgrTVQvWERxYXdwYVdmbEwyeTl6WStVdjRpZEFYbGRaQ1JwVUhITldXZjhPeUMvcFJiZndhYVYzRDJ6RjEKWnhyemdiSHFnd1l6ZERzZ2F1ZHZOejdKaHMrQ2hDcS9SUDVoTEhjZDc1eW01bmppTFZsVmcvYUZJS09IT2wyZwpURXZ0OFlnY013VEloMDY0a3FqVUt4OVAwZkJKWUszcFdGaHpYcGhDR2lndTdTd3EyYnpGTkZabjY1SEdtSDBJCmNUSzFZTUpuQWdNQkFBRUNnZ0VCQUxlRm1JeUtWb3ZDUWRmYjFoazJIYU1IOXFLNmg3OEJwbkpxK29lQXNPUXkKdXdZMVIxTzZqS1MzYWJkdTUvc3RWM0V4QVdTNk03ZUhKVzBIUkNCQXRORG1mQ256Y2dmN1plR0lDZExuTThMSwpMTEhKUWp1SzZndFFXeWhUSnZ1TENXYUp2VlQ0U3NFL3pibGljcDNrYWlwbm5TTDdvMlQ3ZjlidEljVkdMUjNvCklhNU1SWnZ3ZDRHZzBkakErNUIwNWhXU3lDT3k0OHJFVzVKMUdCdC90eTBlaHhEOVVUVS9nb0ViL1Q1TXY1OVYKMWY2elNjS0lHbTh3emx5UnVZbWZwTkwrYjFkdFVUb1NUdVA5R0loU3FWTFN1NUJpR2RTMk81MFhqOWVUQlFhRgpRZUtrN002dWdjanZtZHdzTW4vdHM1T2pvVjY0bk10QlNWemY1VWhJdm1rQ2dZRUE2aGQwZWFHK3J1TFhKTDQwCncreUVuUDZtTktYQkI3eVNTWkVtck1aOWxGVUFxOVdQUk9pZnQ5Tm1vc1BGWi9QMDNBcWFhb3cxTGJmdjBMMFQKQ0hyNkJZSGhtYkNVTjJ6TExrRjZSVnI4NUhtQUxjdVhyajVEM3pZd3lZVmVJOThzV0RZcGVsaWtnOUFnNUFtagpNc3ZBTnRYRElJQmlXTkFQQzJoWXhORisrTHNDZ1lFQTMwTm15ZDFzSi9UaFJvUFpoK2dMNmZ0S2RySE1EWk1zCjRHZkI5K2FDTDNtR3NwU094MTlHOHJmbG9ZU2xNTE5HdnlZcGo1SGg1aHJnQXc4aGVBS3BFRmxFVTdBcm54dVcKZmwwc2J3RkhwN05pZUZscGFPdzU2Mm9FN3c1M2pPRHBIQ1ZLSFphQ0lHZjVLSS9tQmRuVWZYZ1JzSzExdjZMTwpJaExYMFNSM3FFVUNnWUFscUpaTlJ1NzFGWHNFNXpCMzRHSEpHOUpESC9NNHVtWlNQVzZhVnVnMjU2SFBBdkVrClpjUGovN2RBTWZ4YzU4c1padjlHYXIzWFdBTFZjc1ZRRlBDSjJFWWh3bDFsdVRQS2dqQVlYalhXejVFR1RQMWUKdzVlSm5oOGxIRFp6ME9CQ1pKd3htWGNGMllLaERNZmJVUm5mK0cyR21nQzRSdWhVcm5teFYvNTBKd0tCZ0RmSAo2VWlLTDltVHp5MEZDRFp5ZlhlS04wS01qWVRldnBtYWt0WFRHN2VzejBDUzZWRmF0cWt4MVFlVDBvbm1ZTWlsClNrRDZtOHdYN3R3VXpiSGtTRVV6YUdUWVlTMnhnTm8xZ1VLQ3VWcG04VFZNY1krclpaVXh1ZVhZWVhvclAxS3UKNW1PYUZRenZyVXE3R1NkaEV6djk0YjJZdVJDV0pwWlF5dWNRQzIxWkFvR0FKbnNGeHl4ZmFXajFEVHUxcEttNQpTSHQvL0cyRGZteHhKQ05aTFZMUHJYVDJhWmdrNWQwMW5Zb3dydCtscCtiSXBLc09BS2MxamxtRVNwT2VaTEU1Cmk0UVV0eEs3SnV5dHNNZXdqUCtYdmc3VFNEN3d1bW95Vkh6RS9VOTBYcldPOVJJd1VlZFpmOFg4bjVPNCtaRisKeWpqaWNlcGY1ci9DaFNhZG1jM1RwMFk9Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0Kkind: Secretmetadata:name: arcadia-wildcardtype: kubernetes.io/tls---apiVersion: k8s.nginx.org/v1kind: VirtualServermetadata:name: arcadiaspec:host: $nginx_ingress tls:secret: arcadia-wildcard # Represents the server certificateredirect:enable: true # Always redirect to https if incoming request is httpupstreams:- name: arcadia-usersservice: arcadia-usersport: 80healthCheck: # This is the most basic healthcheck config for more info follow this link https://docs.</description>
    </item>
    
    <item>
      <title>Nginx App Protect testing</title>
      <link>/060_security/030_nap_test/</link>
      <pubDate>Wed, 08 Jul 2020 14:37:59 +0300</pubDate>
      
      <guid>/060_security/030_nap_test/</guid>
      <description>Browse again to the Arcadia web app and verify that it is still working.
  Let&amp;rsquo;s simulate a Cross Site Scripting (XSS) attack, and make sure it&amp;rsquo;s blocked:
  https://&amp;lt;INGRESS-EXTERNAL-IP&amp;gt;/?a=%3Cscript%3Ealert(%27xss%27)%3C/script%3E
Each of the blocked requests will generate a support ID, save it for later.
Browse to the ELK as before and click the &amp;ldquo;Discover&amp;rdquo; button:  Here, you&amp;rsquo;ll see all the request logs, allowed and blocked, sent by the Nginx WAF to ELK.</description>
    </item>
    
    <item>
      <title>Side Car Injection</title>
      <link>/050_service_mesh/030_side_car_injection/</link>
      <pubDate>Wed, 08 Jul 2020 14:37:59 +0300</pubDate>
      
      <guid>/050_service_mesh/030_side_car_injection/</guid>
      <description>Inject the sidecar into the application pods  kubectl get deployment arcadia-frontend -oyaml | nginx-meshctl inject | kubectl apply -f -kubectl get deployment arcadia-login -oyaml | nginx-meshctl inject | kubectl apply -f -kubectl get deployment arcadia-stock-transaction -oyaml | nginx-meshctl inject | kubectl apply -f -kubectl get deployment arcadia-stocks -oyaml | nginx-meshctl inject | kubectl apply -f -kubectl get deployment arcadia-users -oyaml | nginx-meshctl inject | kubectl apply -f -Wait for the sidecar to be injected in all pods and verify that the pods have 2 containers  kubectl get podsOutput</description>
    </item>
    
    <item>
      <title>Authentication with Openid Connect and Okta</title>
      <link>/040_ingress/040_oidc_1/</link>
      <pubDate>Wed, 08 Jul 2020 14:37:59 +0300</pubDate>
      
      <guid>/040_ingress/040_oidc_1/</guid>
      <description>Due to unsecure credentials storage of the application it has been decided to migrate to Okta which will provide user management and authentication without the need to store localy personal information.
 Redeploy the front and microservice to a new version in order to use Openid.  cat &amp;lt;&amp;lt; EOF | kubectl apply -f -apiVersion: apps/v1kind: Deploymentmetadata:name: arcadia-frontendspec:replicas: 2selector:matchLabels:app: arcadia-frontendtemplate:metadata:labels:app: arcadia-frontendspec:containers:- name: arcadia-frontendimage: sorinboiaf5/arcadia-frontend:oktav0.</description>
    </item>
    
    <item>
      <title>Bot Protection</title>
      <link>/060_security/040_bot_protection/</link>
      <pubDate>Wed, 08 Jul 2020 14:37:59 +0300</pubDate>
      
      <guid>/060_security/040_bot_protection/</guid>
      <description>Our application APIs at the moment are published only for consumption by browsers.
Therefor we don&amp;rsquo;t want to allow any kind of automated tool to access these endpoints.
We are going to block not only malicious bots but also tools like curl.
 Try and access the stock microservice and get data with curl.  curl -k https://$nginx_ingress/v1/stock/ticker/allThe request will succeed.
Apply the bot config  cat &amp;lt;&amp;lt; EOF | kubectl apply -f -apiVersion: appprotect.</description>
    </item>
    
    <item>
      <title>Import the OpenApi definition</title>
      <link>/070_controller/040_apis/</link>
      <pubDate>Wed, 08 Jul 2020 14:37:59 +0300</pubDate>
      
      <guid>/070_controller/040_apis/</guid>
      <description>Next we are going to publish the application APIs to the world.
There are two ways of creating this configuration, the first one is manual similar to the way we performed the configuration until this point and the second one is described bellow.
As part of their development cycle, the developers of the Arcadia application are generating an OpenApi specification to describe their APIs.
We are going to use this API specification in order to publish the services to the world.</description>
    </item>
    
    <item>
      <title>Service Mesh Visibility</title>
      <link>/050_service_mesh/040_opentracing/</link>
      <pubDate>Wed, 08 Jul 2020 14:37:59 +0300</pubDate>
      
      <guid>/050_service_mesh/040_opentracing/</guid>
      <description>In order to be able and trace and monitor all of our application calls we will need to expose the Grafana and Zipkin servers
 Expose Grapha and Zipkin.
You can ignore any warning messages generated by the bellow command.  kubectl get svc -n nginx-mesh grafana -oyaml | sed &#39;s/ClusterIP/LoadBalancer/g&#39; | kubectl apply -f -kubectl get svc -n nginx-mesh zipkin -oyaml | sed &#39;s/ClusterIP/LoadBalancer/g&#39; | kubectl apply -f -Get the svc external ip  kubectl get svc grafana zipkin -n nginx-meshOutput</description>
    </item>
    
    <item>
      <title>Explore the configuration</title>
      <link>/070_controller/050_explore/</link>
      <pubDate>Wed, 08 Jul 2020 14:37:59 +0300</pubDate>
      
      <guid>/070_controller/050_explore/</guid>
      <description>We have automatically done all our configuration. Let explore it.
 Navigate to the imported configuration:  &amp;ldquo;N&amp;rdquo; -&amp;gt; &amp;ldquo;Services&amp;rdquo; -&amp;gt; &amp;ldquo;APIs&amp;rdquo; -&amp;gt; Click &amp;ldquo;arcadia-api&amp;rdquo; -&amp;gt; Click the edit button Inspect the published APIs  Click &amp;ldquo;Routing&amp;rdquo; You can observe the &amp;ldquo;arcadia-stocks&amp;rdquo; component. This is the only API we have published and is in charge of responding with current crypto currencies prices.
This API is also accessed by the browser application and is not limited.</description>
    </item>
    
    <item>
      <title>Mesh Access List</title>
      <link>/050_service_mesh/050_mesh_acl/</link>
      <pubDate>Wed, 08 Jul 2020 14:37:59 +0300</pubDate>
      
      <guid>/050_service_mesh/050_mesh_acl/</guid>
      <description>The Kubernetes networking environment by default is an open network without restrictions or limitations.
This means that any pod can access any other pod or service. This introduces potential risks.
Our arcadia-users exposes an internal API /v1/user_i/ which is used by the arcadia-login service only. This means that no other service should have access to it. Lets see what security implications this has:
 Access the arcadia-stocks pod. This pod is used only to get current crypto prices and nothing else.</description>
    </item>
    
    <item>
      <title>Mutual TLS</title>
      <link>/040_ingress/060_mtls_1/</link>
      <pubDate>Wed, 08 Jul 2020 14:37:59 +0300</pubDate>
      
      <guid>/040_ingress/060_mtls_1/</guid>
      <description>Enabling MTLS on our Nginx Ingress Controller is quite simple.
 Create the Certificate Secret and a policy to use on the Virtual Server resource  cat &amp;lt;&amp;lt; EOF | kubectl apply -f -kind: Secretmetadata:name: ingress-mtls-secretapiVersion: v1type: nginx.org/cadata:ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUQvVENDQXVXZ0F3SUJBZ0lVSzdhbU14OFlLWG1BVG51SkZETDlWS2ZUR2ZNd0RRWUpLb1pJaHZjTkFRRUwKQlFBd2dZMHhDekFKQmdOVkJBWVRBbFZUTVFzd0NRWURWUVFJREFKRFFURVdNQlFHQTFVRUJ3d05VMkZ1SUVaeQpZVzVqYVhOamJ6RU9NQXdHQTFVRUNnd0ZUa2RKVGxneEREQUtCZ05WQkFzTUEwdEpRekVXTUJRR0ExVUVBd3dOCmEybGpMbTVuYVc1NExtTnZiVEVqTUNFR0NTcUdTSWIzRFFFSkFSWVVhM1ZpWlhKdVpYUmxjMEJ1WjJsdWVDNWoKYjIwd0hoY05NakF3T1RFNE1qQXlOVEkyV2hjTk16QXdPVEUyTWpBeU5USTJXakNCalRFTE1Ba0dBMVVFQmhNQwpWVk14Q3pBSkJnTlZCQWdNQWtOQk1SWXdGQVlEVlFRSERBMVRZVzRnUm5KaGJtTnBjMk52TVE0d0RBWURWUVFLCkRBVk9SMGxPV0RFTU1Bb0dBMVVFQ3d3RFMwbERNUll3RkFZRFZRUUREQTFyYVdNdWJtZHBibmd1WTI5dE1TTXcKSVFZSktvWklodmNOQVFrQkZoUnJkV0psY201bGRHVnpRRzVuYVc1NExtTnZiVENDQVNJd0RRWUpLb1pJaHZjTgpBUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTmFINVRzaTZzaUFsU085dEJnYmY3VVRwcWowMUhRTlQ2UjhtQy9pCjhLYXFaSW9XSUdvN2xhTW9xTDYydTc4ay9WOHM2Z0FJaU1DSzBjekFvTFhNSnlJQkxQeTg4Yzdtc2xwZXgxTkEKVmRtMkVTVkN6bVlERE1TT3FpVmszWmpYeC9URmo2QzhNRFhhRkZUWFg1dWdtbWdscnFCWlh0OVI5VVBwVTJMNwo1bEZ0NlJ2R3VGczgvbVZORVR5c1A0SFhCWlh2ZE9mdG1YWUkvK01hOW5CMzIzNjdmcTI0L0RKZ2YvK2xRbUsxCkJLR3poSTZSc1pSSmdWOXdpK1VuZTBYNjlaS2lLOFdXU3lZS252YnRrcHZuTDA2dGNJaXJZNi80UzZ4Sm1HRVQKZEJUNmVxc0NoSUpQUStWSEp5dTROdnV6WmVCUXpGdmMwNytnUGZkVWZra1FXODhDQXdFQUFhTlRNRkV3SFFZRApWUjBPQkJZRUZKUGdhcnFYa00rdEJ0djVhdndTUWhUQmpTU2VNQjhHQTFVZEl3UVlNQmFBRkpQZ2FycVhrTSt0CkJ0djVhdndTUWhUQmpTU2VNQThHQTFVZEV3RUIvd1FGTUFNQkFmOHdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUIKQUl3WXpoY0s4OWtRL0xGWjZFRHgrQWp2bnJTVSs1cmdwQkgrRjVTNUUyY3pXOE5rNXhySnl0Y0ZUbUtlKzZScwpENHlxeTZSVVFEeWNYaDlPelBjbzgzYTBoeFlCZ1M5MWtJa25wYWF4dndLRDJleWc3UGNnK1lkS1FhZFlMcUY0CmI3cWVtc1FVVkpOWHdkZS9VanRBejlEOTh4dngwM2hQY2Qwb2dzUUhWZ21BZVpFd2l3UzFmTy9WNUE4dTl3MEkKcHlJRTVReXlHcHNpS2dpalpiMmhrS05RVHVJcEhiVnFydVA4eEV6TlFnamhkdS9uUW5OYy9lRUltVUlrQkFUVQpiSHdQc2xwYzVhdVV1TXJxR3lEQ0p2QUJpV3J2SmE3Yi9XcmtDT3FUWVhtR2NGM0w1ZU9FeTBhYkp0M2NNcSs5CnJLTUNVQWlkNG0yNEthWnc3OUk2anNBPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==---apiVersion: k8s.nginx.org/v1kind: Policymetadata:name: ingress-mtls-policyspec:ingressMTLS:clientCertSecret: ingress-mtls-secretverifyClient: &amp;quot;on&amp;quot;verifyDepth: 1EOFAttach the MTLS policy to the VS.  cat &amp;lt;&amp;lt; EOF | kubectl apply -f -apiVersion: k8s.</description>
    </item>
    
    <item>
      <title>Testing the APIs</title>
      <link>/070_controller/060_test/</link>
      <pubDate>Wed, 08 Jul 2020 14:37:59 +0300</pubDate>
      
      <guid>/070_controller/060_test/</guid>
      <description>Our APIs are published, lets verify all works as expected.
 Check that the authentication is failing when not providing an API key  curl -k# https://$microhost/v1/stock/ticker/allOutput
&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;401 Authorization Required&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;center&amp;gt;&amp;lt;h1&amp;gt;401 Authorization Required&amp;lt;/h1&amp;gt;&amp;lt;/center&amp;gt;&amp;lt;hr&amp;gt;&amp;lt;center&amp;gt;nginx&amp;lt;/center&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt; Try again but this time including the API key and the test-client value  curl -k# https://$microhost/v1/stock/ticker/all --header &amp;quot;apikey: 0123456789&amp;quot;Output
{&amp;#34;btc&amp;#34;:{&amp;#34;ticker&amp;#34;:{&amp;#34;symbol&amp;#34;:&amp;#34;tBTCUSD&amp;#34;,&amp;#34;bid&amp;#34;:53783,&amp;#34;bidSize&amp;#34;:9.98263374,&amp;#34;ask&amp;#34;:53789,&amp;#34;askSize&amp;#34;:8.07079989,&amp;#34;dailyChange&amp;#34;:-1057,&amp;#34;dailyChangePerc&amp;#34;:-0.0193,&amp;#34;lastPrice&amp;#34;:53789,&amp;#34;volume&amp;#34;:6229.6409748,&amp;#34;high&amp;#34;:56432,&amp;#34;low&amp;#34;:53441}},&amp;#34;eth&amp;#34;:{&amp;#34;ticker&amp;#34;:{&amp;#34;symbol&amp;#34;:&amp;#34;tETHUSD&amp;#34;,&amp;#34;bid&amp;#34;:2767.1,&amp;#34;bidSize&amp;#34;:334.64948837000003,&amp;#34;ask&amp;#34;:2767.9,&amp;#34;askSize&amp;#34;:198.96622354000002,&amp;#34;dailyChange&amp;#34;:55.8,&amp;#34;dailyChangePerc&amp;#34;:0.0206,&amp;#34;lastPrice&amp;#34;:2767.3,&amp;#34;volume&amp;#34;:72050.81102921,&amp;#34;high&amp;#34;:2796.1,&amp;#34;low&amp;#34;:2661.5}},&amp;#34;ltc&amp;#34;:{&amp;#34;ticker&amp;#34;:{&amp;#34;symbol&amp;#34;:&amp;#34;tLTCUSD&amp;#34;,&amp;#34;bid&amp;#34;:256.64,&amp;#34;bidSize&amp;#34;:632.84153383,&amp;#34;ask&amp;#34;:256.82,&amp;#34;askSize&amp;#34;:1257.55131368,&amp;#34;dailyChange&amp;#34;:0.23,&amp;#34;dailyChangePerc&amp;#34;:0.0009,&amp;#34;lastPrice&amp;#34;:256.72,&amp;#34;volume&amp;#34;:36688.87741606,&amp;#34;high&amp;#34;:262.73,&amp;#34;low&amp;#34;:250.29}}} The configuration is rate limiting to 5 request per 1 minute sliding window.</description>
    </item>
    
  </channel>
</rss>
